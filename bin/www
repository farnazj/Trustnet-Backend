#!/usr/bin/env node
process.env.UV_THREADPOOL_SIZE = 10;
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-example:server');
var http = require('http');
var registerMedia = require('../registerNewsMedia');
var constants = require('../lib/constants')
var garbageCollection = require('../lib/garbageCollection');
const oldPostsRemoval = require('../lib/oldPostsRemoval');
const oldURLMappingRemoval = require('../lib/oldURLMappingRemoval');
const logger = require('../lib/logger');
var db = require('../models');
var FeedQueue = require('../lib/feedQueue');
var AltTitlesRedisHandler = require('../lib/alternativeTitles');
var URLMappings = require('../lib/urlMappings');
const CronJob = require('cron').CronJob;
const { fork } = require('child_process');

//forked = fork('./lib/graphJobsHandler.js');
// var kue = require('kue')
//   , queue = kue.createQueue();
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 db.sequelize.sync().then(async function () {

  await registerMedia();
  feedQueue = await FeedQueue.build();
  logger.info('past registering media');

  //forked.send({ message: 'child process is working' });

  feedQueue.initFeedUpdateJobs();

  altTitlesRedisHandler = await AltTitlesRedisHandler.build();
  urlMappingsRedisHandler = await URLMappings.build();

  const garbageCollectionJob = new CronJob('00 1 4 * * *', function() {
    garbageCollection.removeExpiredTokensAccounts();
  });

  garbageCollectionJob.start();

  const oldPostRemoverJob = new CronJob('00 1 2 * * *', function() {
    oldPostsRemoval.removeOldPosts();
  });

  const oldURLMappingRemovalJob = new CronJob('00 1 3 * * *', function() {
    oldURLMappingRemoval.removeOldURLMappings();
  });

  oldPostRemoverJob.start();
  oldURLMappingRemovalJob.start();

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
 });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
